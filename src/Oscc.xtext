
/********************************************************
 * OSCake / OSCC = Open Source Compliance Collection
 * Open Source Compliance artifacts knowledge engine
 * 
 * Copyright (c) {2020 Karsten Reincke, Deutsche Telekom AG
 *
 * This program is made available under the terms of the
 * Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
  *******************************************************/

grammar de.oscake.weak.Oscc with org.eclipse.xtext.common.Terminals

generate oscc "http://www.oscake.de/weak/Oscc"

/*************
 * General semantical definitions:
 * 
 * Sometimes the scanning tools inserts the values 'null' or "911"
 * instead of a valid string value. The meaning of these statements:
 * 
 * 'null' : the scanning tool has looked for the element but didn't
 *          find it Hence, it does not exist in the repository
 * "911"  : the scanning tool has looked for the element and found
 *          something, that the scanner didn't understand, although
 *          it seems to be meaningful in the respective context
 *************/


/**
 * A weak Compliance Artifact Collection consist of
 * a) Meta-Data
 * b) a list 'software packages' =  
 *    - the licensing statements inside of a package
 *    - the compliance artifacts required by the respective licenses
 */
ComplianceArtifactCollection:
'{'
  '"hasIssues"' ':' hiv=Boolean ',' 
  '"containsHiddenSections"' ':' chs=Boolean ',' 
  '"complianceArtifactCollection"' ':' '{'
    '"cid"' ':' cacid=STRING ','
    ('"author"' ':' cacComposer=STRING ',')?
    ('"release"' ':' cacReleaseNumber=STRING ',')?
    ('"date"' ':' cacReleaseDate=STRING ',')?  
    '"archivePath"' ':' cacContPath=STRING ','
    '"archiveType"' ':' cacContType=('"ZIP"'|'"DIR"')
  '}' ','
  
  '"complianceArtifactPackages"' ':' '['
    '{'
      (complianceArtifactPackages+=ComplianceArtifactPackage '}' ',' '{')*
      (complianceArtifactPackages+=ComplianceArtifactPackage '}')
  ']'  
'}';

/**
 * Each ComplianceArtifactPackage refers to one software package of the 
 * distributable collection and is defined 
 * - by some meta information,
 * - by a set of default licensing statements
 * - a list of directories which contain their own licensing statements
 * - a list of files which contain their own licensing statements
 */

ComplianceArtifactPackage:
  '"pid"' ':' capid=STRING ','
  ('"release"' ':' capReleaseNumber=STRING ',')?
  ('"repository"' ':' capRepoUrl=STRING ',')? 
  '"id"' ':' calid=STRING ','
  '"distribution"' ':' dist=('"DISTRIBUTED"') ','
  '"packageType"' ':' pkgType=('"EXECUTABLE"') ','
  '"sourceRoot"' ':' srcRoot=STRING ','
  '"hasIssues"' ':' hiv=Boolean ',' 
  
  '"defaultLicenses"' ':' '['
    '{' 
      '"foundInFileScope"' ":"  defpath=STRING ','
      (casl+=ComplianceArtifactSet '}' ',' '{')* 
      (casl+=ComplianceArtifactSet '}')    
  ']' 
  ( "," '"defaultCopyrights"' ':' '['
  	(defaultCrstList+=CopyrightStatement ',')* 
  	(defaultCrstList+=CopyrightStatement)?
  ']' )?
  ( ','
  '"unifiedCopyrights"' ':' '['
  	(unifiedCrstList+=CopyrightStatement ',')* 
  	(unifiedCrstList+=CopyrightStatement)?
  
  ']')?
  
  (',' '"dirLicensings"' ':' '['
    (
      '{'
       (dirComplianceArtifactSets+=DirComplianceArtifactSet '}' ',' '{')* 
       (dirComplianceArtifactSets+=DirComplianceArtifactSet '}')
    )?
  ']' )?
  (',' '"fileLicensings"' ':' '['
    (
      '{'
        (fileComplianceArtifactSets+=FileComplianceArtifactSet '}' ',' '{')* 
        (fileComplianceArtifactSets+=FileComplianceArtifactSet '}')
    )?
  ']' )? 
;
 
 /*
  * A directory containing its' own licensing statement is defined
  * - by path of the directory, that contains its own licensing statement
  * - a list of 1:n licensing statements
  */
 DirComplianceArtifactSet:
  '"dirScope"' ':' dpath=STRING ','
  '"dirLicenses"' ':' '['
    '{'
      (dcasl+=ComplianceArtifactSet '}' ',' '{')* 
      (dcasl+=ComplianceArtifactSet '}') 
  ']'
;

 /*
  * A file that is relevant for the compliance is
  * - either a file that is needed to fulfill a requirement (NOTICE,...) 
  * - or contains itself 1:n licensing statements
  * 
  * For any general file, the generally may say that it
  * - didn't stored the file content in the compliance fulfillment archive ('null')
  * - had any troubles to store the content ("911")
  * - has successfully stored the content
  * 
  * For some specific files OSCake expects that the scanners store the content
  * in the compliance fulfillment archive.
  * 
  * The meaning of 'null' '911', STRING is this
  * - If OSCake does not need the content, the the OSCC-Generator 
  *   hides the information when writing the OSCF file
  * - If OSCake knows, that it needs the file content in any context, the OSCC-Generator 
  *   - writes a 'get more information-' or 'resolve-the-trouble-' task into the todo-file
  *   - marks the generated OSCF.md as undistributable.
  */
FileComplianceArtifactSet:
  
  '"fileScope"' ':'
  ( ( fpath=('"NOTICE"' | '"NOTICE.txt"' | '"NOTICE.md"') ','
    /* Abmachung f√ºr den ORT-Writer: wenn so eine Datei existiert, ist sie im archive */
    '"fileContentInArchive"' ':' fcPath=STRING
    )
    |
    ( fpath=STRING 
      (',' '"fileContentInArchive"' ':' fcPath=('null' | '"911"' | STRING  ))?
    )
  ) ','
  
  '"fileLicenses"' ':' '['
    '{'
      (fcasl+=ComplianceArtifactSet '}' ',' '{')* 
      (fcasl+=ComplianceArtifactSet '}')
   ']'
   
    ( "," '"fileCopyrights"' ':' '['
  		(fileCrstList+=CopyrightStatement ',')* 
  		(fileCcrstList+=CopyrightStatement)?
  	']' )?
;

/*
 * A weak compliance artifact set contains 
 * - a SPDX license identifier 
 * - some elements to fulfill some license requirements.
 * 
 * Note: 
 * 
 * 1) it's not the task of the scanner to know, which artifacts have 
 *    to be used in which context.
 * 2) So the scanner may insert all artifacts he can find in the 
 *    respective scope, regardless whether the found license does require
 *    them or does not require them.
 * 
 * It is the task (competence) of OSCake to look for the necessary 
 * compliance artifacts and 
 * - if possible to insert them into the OSCF.md file created at the end 
 * - or
 *   - to insert a 'get more information-' or 'resolve-the-trouble-' task into 
 *   the todo-file
 *   - to mark the the generated OSCF.md as undistributable
 */
 ComplianceArtifactSet:
  '"license"' ':'
    spdxId= (
      '"MIT"' | 
      '"BSD-2-Clause"' |
      '"BSD-3-Clause"' |
      '"Apache-2.0"' |
      '"noassertion"' | '"NOASSERTION"' |
      'null'
    ) 
  
  (',' '"licenseTextInArchive"' ':' lfPath=('null' | '"911"' | STRING ))?
  (',' '"hasIssues"' ':' hiv=Boolean) ?
  (',' '"dummyComplianceArtifact"' ':' dummyArtifact=('null' | '"911"' | STRING ))?
;


Boolean: bval=('true'|'false');

CopyrightStatement : crStatement=STRING;

